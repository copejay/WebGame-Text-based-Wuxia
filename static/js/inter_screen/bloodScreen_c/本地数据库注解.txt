

在项目中使用了一个本地数据库localDb来暂时存储数据

设计思路，数据库作为一个核心枢纽，与listen模块互动获得云服务器的数据

与其它功能模块互动，当有数据更新时调用子模块进行数据更新，接收子模块的数据更新操作，向listen发起数据更新请求

设计有定时脚本负责定时同步云服务器的数据，定时脚本写在listener里面

本地模块之间使用event_bus进行通信，需要注意子模块调用localDb和localDb主动调用子模块的通信格式

子模块调用localDb的数据，一般格式 【子模块名】-【beg】-[具体请求的数据]
localDb回复，一般格式【localDb】-【具体数据】（子模块对于回复信息只会接收一次，once调用）

localDb主动调用子模块更新，一般格式，{【localDb】-【renew】，type:,data},使用字典传递


localDb接收listen信息格式，【gift】+具体信息
localDb主动传输给listen，【localDb_renew_db,type:数据类型，data:具体数据】使用字典传递


基本调用逻辑梳理
子模块发起查询，数据库接收并返回

子模块发起修改，数据库接收，向listen发起修改，listen中转，--服务器处理--，listen接收，发起数据库更新，数据库接收并更新，对子模块发起更新（这里子模块更新会触发弹窗，一般没有问题，因为这段逻辑调用很快，一般不会出现弹窗被关闭又被自动唤起的问题）

目前只有在弹窗唤起存在时才会对服务器发起数据申请，所有暂时没有存在弹窗自动弹出的bug

listen自动调用更新程序，--服务器处理--，listen接收数据，发起数据库更新，数据库更新
（这里有个问题，数据库更新之后还需要检查弹窗是否被调用，只有被调用才更新子弹窗信息，不然就会造成子弹窗被自动触发，影响游戏体验，【listen的自动更新还没实现，子弹窗的检测机制也没实现，注意！】）
